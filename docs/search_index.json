[["index.html", "3D’omics | Colon microdissection test Developmental work Chapter 1 Introduction 1.1 Prepare the R environment", " 3D’omics | Colon microdissection test Developmental work Antton Alberdi1 2024-07-02 Chapter 1 Introduction This webbook contains all the code used for the study on the effect of probiotics on Salmonella infection in broiler chicken. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/ANMI011_two_chicken_colon.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(jpeg) library(patchwork) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Count data 2.2 Filter and normalise data 2.3 Color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.0.1 Sample metadata sample_metadata &lt;- airtable(&quot;4-MSE-Info&quot;, &quot;appKakM1bnKSekwuW&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;LabBatch_text&quot;,&quot;IntestinalSection&quot;,&quot;SampleType&quot;,&quot;Xcoord&quot;,&quot;Ycoord&quot;,&quot;size&quot;,&quot;cryosection_text&quot;,&quot;buffer_text&quot;,&quot;Collection_Success&quot;,&quot;UsedCycles&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(LabBatch_text %in% c(&quot;MSEB0012&quot;)) %&gt;% rename(batch=LabBatch_text,microsample=ID,section=IntestinalSection,type=SampleType,cryosection=cryosection_text,buffer=buffer_text,collection=Collection_Success,cycles=UsedCycles) %&gt;% select(microsample,section,type,batch,cryosection,buffer,Xcoord,Ycoord,size,collection,cycles) %&gt;% unnest(c(section, Xcoord, Ycoord, size, collection, cycles)) %&gt;% arrange(microsample) 2.1 Count data read_counts &lt;- read_tsv(&quot;data/MSEB0012_read_counts.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% pivot_longer(!genome, names_to = &quot;data&quot;, values_to=&quot;counts&quot;) %&gt;% mutate(sample = substr(data, 1, 7)) %&gt;% group_by(genome,sample) %&gt;% summarise(counts=sum(counts), .groups=&quot;drop&quot;) %&gt;% pivot_wider(names_from=&quot;sample&quot;, values_from=&quot;counts&quot;) 2.1.1 Base hit table This is the document containing the number of nucleotide bases have been covered by at least one read in each sample and MAG. This information is used to calculate MAG coverage values. basehits &lt;- read_tsv(&quot;data/MSEB0012_covered_bases.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% pivot_longer(!genome, names_to = &quot;data&quot;, values_to=&quot;counts&quot;) %&gt;% mutate(sample = substr(data, 1, 7)) %&gt;% group_by(genome,sample) %&gt;% summarise(counts=sum(counts), .groups=&quot;drop&quot;) %&gt;% pivot_wider(names_from=&quot;sample&quot;, values_from=&quot;counts&quot;) 2.1.2 Genome metadata Relevant metadata of genomes is fetched from 2-3 files and merged into one genome metadata object for downstream analyses. 2.1.2.1 Taxonomy This is the raw taxonomy table generated by GTDBtk, which is simplified for downstream analyses. genome_taxonomy &lt;- read_tsv(&quot;data/genome_taxonomy.tsv&quot;) %&gt;% rename(genome = user_genome) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% select(genome,domain,phylum,class,order,family,genus,species) %&gt;% arrange(match(genome, read_counts$genome)) 2.1.2.2 Genome quality Quality properties of the genomes. genome_quality &lt;- read_tsv(&quot;data/genome_quality.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% arrange(match(genome, read_counts$genome)) %&gt;% select(genome, Completeness, Contamination, Coding_Density, Genome_Size) %&gt;% rename(completeness=Completeness,contamination=Contamination,coding_density=Coding_Density,length=Genome_Size) 2.1.2.3 Merged metadata object Merge taxonomy, length and quality information genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=join_by(genome==genome)) #join quality 2.1.3 Genome tree This is the raw tree generated by GTDBtk, which needs to be pruned to obtain the phylogenetic tree of the genomes. Note that the archaeal tree is only generated if any archaeans are detected among the genomes. genome_tree &lt;- read.tree(&quot;data/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=read_counts$genome) # keep only MAG tips 2.1.4 MAG functional annotations This is the raw annotation table generated by DRAM, which is used to generate GIFT data using distillR. genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1,genome=2) 2.2 Filter and normalise data Raw data needs to be filtered and normalised to make it useful for downstream analyses. 2.2.1 Generate coverage table By dividing the number of base hits by the length of each genome, coverage values can be calculated. genome_coverage &lt;- basehits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.2 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.3 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.4 Distil functional annotations Raw functional annotations are distilled into genome-inferred functional traits to generate biologically more meaningful functional traits for downstream analyses. genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_counts_filt, genome_tree, genome_metadata, genome_gifts, sample_metadata, phylum_colors, file = &quot;data/data.Rdata&quot;) read_counts: Number of reads mapped to each genome in each sample. Note this is the unfiltered and unnormalised raw community composition table. genome_counts: Number of genomes quantified in each sample, calculated through filtering and normalising read_counts. This is the community composition table to be used in downstream analyses unless otherwise stated. genome_tree: Phylogenetic tree of the genomes, to be employed in downstream phylogenetic analyses. genome_metadata: Taxonomic and quality information of the genomes. sample_metadata: Treatment/population and other relevant metadata of the samples. "],["data-quality.html", "Chapter 3 Data quality 3.1 Load statistics 3.2 Individual overview 3.3 Biplots 3.4 Quality flagging", " Chapter 3 Data quality load(&quot;data/data.Rdata&quot;) 3.1 Load statistics read_stats &lt;- read_tsv(&quot;data/reports/multiqc_fastqc.txt&quot;, col_types = cols_only(&quot;Sample&quot; = col_character(), &quot;Total Sequences&quot; = col_double(), &quot;%GC&quot; = col_double(), &quot;total_deduplicated_percentage&quot; = col_double())) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample,total_sequences=&quot;Total Sequences&quot;,percent_gc=&quot;%GC&quot;,percent_unique=total_deduplicated_percentage) %&gt;% group_by(microsample) %&gt;% summarise(total_sequences=sum(total_sequences), percent_unique=mean(percent_unique), percent_gc=mean(percent_gc)) host_mapping_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_flagstat.txt&quot;) %&gt;% mutate(reference = case_when( grepl(&quot;GRCh38&quot;, Sample, ignore.case = TRUE) ~ &quot;human&quot;, grepl(&quot;GRCg7b&quot;, Sample, ignore.case = TRUE) ~ &quot;chicken&quot;, TRUE ~ NA )) %&gt;% filter(reference==&quot;chicken&quot;) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample,reads_mapped_host=mapped_passed,reads_mapped_host_percent=mapped_passed_pct) %&gt;% select(microsample,reads_mapped_host,reads_mapped_host_percent) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped_host=sum(reads_mapped_host),reads_mapped_host_percent=mean(reads_mapped_host_percent)) human_mapping_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_flagstat.txt&quot;) %&gt;% mutate(reference = case_when( grepl(&quot;GRCh38&quot;, Sample, ignore.case = TRUE) ~ &quot;human&quot;, grepl(&quot;GRCg7b&quot;, Sample, ignore.case = TRUE) ~ &quot;chicken&quot;, TRUE ~ NA )) %&gt;% filter(reference==&quot;human&quot;) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample, reads_mapped_human=mapped_passed,reads_mapped_human_percent=mapped_passed_pct) %&gt;% select(microsample,reads_mapped_human,reads_mapped_human_percent) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped_human=sum(reads_mapped_human),reads_mapped_human_percent=mean(reads_mapped_human_percent)) quantification_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_stats.txt&quot;) %&gt;% filter(str_detect(Sample, &quot;mgg-pbdrep&quot;)) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped=sum(reads_mapped),reads_mapped_percent=mean(reads_mapped_percent)) quality_stats &lt;- read_stats %&gt;% left_join(host_mapping_stats, by=join_by(microsample==microsample)) %&gt;% left_join(human_mapping_stats, by=join_by(microsample==microsample)) %&gt;% left_join(quantification_stats, by=join_by(microsample==microsample)) 3.2 Individual overview 3.2.1 Sequencing depth quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=total_sequences,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=10000000, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Number of reads&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.2 Sequence duplication quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=percent_unique,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=35, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Percentage of non-duplicates&quot;, y=&quot;Microsamples&quot;, fill=&quot;Collection success&quot;) 3.2.3 GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=percent_gc,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=60, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Percentage of GC&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.4 Host % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=reads_mapped_host_percent,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Host %&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.5 Human % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=reads_mapped_human_percent,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=5, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Human %&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.6 Bacteria mapping % quality_stats %&gt;% left_join(sample_metadata,by=&quot;microsample&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=reads_mapped_percent,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=75, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(animal + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Mapped to MAGs (%)&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.7 Domain-adjusted mapping rate 3.3 Biplots 3.3.1 Sequencing depth vs. GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=percent_gc,y=total_sequences,color=animal))+ geom_point()+ scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(. ~ batch, scales=&quot;free&quot;) + labs(color=&quot;Sexrion&quot;) 3.3.2 Unique sequences vs. GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=percent_gc,y=percent_unique,color=animal))+ geom_point()+ scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(. ~ batch, scales=&quot;free&quot;)+ labs(color=&quot;Library protocol&quot;) 3.4 Quality flagging quality &lt;- quality_stats %&gt;% mutate(depth = case_when( total_sequences &lt;= 10000000 ~ 0, total_sequences &gt; 10000000 ~ 1, TRUE ~ NA)) %&gt;% mutate(duplicates = case_when( percent_unique &lt;= 35 ~ 0, percent_unique &gt; 35 ~ 1, TRUE ~ NA)) %&gt;% mutate(gc = case_when( percent_gc &gt;= 60 ~ 0, percent_gc &lt; 60 ~ 1, TRUE ~ NA)) %&gt;% mutate(human = case_when( reads_mapped_human_percent &gt;= 5 ~ 0, reads_mapped_human_percent &lt; 5 ~ 1, TRUE ~ NA)) %&gt;% mutate(bacteria = case_when( reads_mapped_percent &lt;= 75 ~ 0, reads_mapped_percent &gt; 75 ~ 1, TRUE ~ NA)) %&gt;% select(microsample, depth, duplicates, gc, human, bacteria) %&gt;% mutate(quality = depth + duplicates + gc + human + bacteria) %&gt;% select(microsample, quality) quality %&gt;% write_tsv(&quot;results/quality.tsv&quot;) 3.4.1 Quality overview quality %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% mutate(animal=substr(cryosection,1,4)) %&gt;% ggplot(aes(x=quality,y=microsample,fill=animal))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=5, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Quality score&quot;, y=&quot;Microsamples&quot;, fill=&quot;Collection success&quot;) quality %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% group_by(section) %&gt;% summarise(average=mean(quality, na.rm=TRUE), percentage_5 = mean(quality == 5, na.rm = TRUE) * 100) %&gt;% tt() tinytable_9kq06nec9sb88a7750k1 .table td.tinytable_css_wjoekf6z1l6easrbja0f, .table th.tinytable_css_wjoekf6z1l6easrbja0f { border-bottom: solid 0.1em #d3d8dc; } section average percentage_5 Colon 2.972222 9.027778 "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy barplot 4.2 MAG overview 4.3 Genus overview", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 192 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 4.1 Taxonomy barplot 4.1.1 Positive samples, coverage-filtered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality &gt;= 4) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors[-4]) + labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality &gt;= 4) %&gt;% mutate(genome=factor(genome,levels=genome_tree$tip.label)) %&gt;% ggplot(aes(x=count, y=microsample, fill=genus, group=genus)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend()) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;), legend.position=&quot;bottom&quot;) + labs(fill=&quot;Genus&quot;) 4.1.2 Positive samples, coverage-unfiltered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality &gt;= 4) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;, space=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) 4.1.3 Control samples, coverage-unfiltered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% #filter(phylum %in% c(&quot;p__Actinomycetota&quot;,&quot;p__Bacillota&quot;,&quot;p__Bacillota_A&quot;,&quot;p__Pseudomonadota&quot;,&quot;p__Verrucomicrobiota&quot;)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(is.na(Xcoord)) %&gt;% filter(type %in% c(&quot;NegativeMembrane&quot;,&quot;NegativeCollection&quot;,&quot;NegativeReaction&quot;)) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y=&quot;Membrane controls&quot;) + facet_nested(cryosection + type ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.text.y = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) 4.2 MAG overview vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Found more than one class &quot;phylo&quot; in cache; using the first, from namespace &#39;phyloseq&#39; Also defined by &#39;tidytree&#39; phylum_colors_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) Rows: 202 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors_heatmap, offset=-0.3, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. sample_selection &lt;- sample_metadata %&gt;% filter(!is.na(Xcoord)) %&gt;% left_join(quality, by=join_by(microsample==microsample)) %&gt;% filter(quality&gt;=4) %&gt;% select(microsample) %&gt;% pull() genome_counts_selected &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_selection))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() vertical_tree &lt;- gheatmap(vertical_tree, genome_counts_selected, offset=-0.2, width=0.5, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. vertical_tree mag_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(quality&gt;=5) %&gt;% group_by(microsample,cryosection,phylum,genome) %&gt;% summarise(relabun=sum(count)) %&gt;% group_by(genome) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) mag_summary %&gt;% slice(1:30) %&gt;% tt() tinytable_fkcjgmcxl0hb6f0310at .table td.tinytable_css_kfg9zgek0od6a6mmrgk7, .table th.tinytable_css_kfg9zgek0od6a6mmrgk7 { border-bottom: solid 0.1em #d3d8dc; } genome mean sd TG5_35:bin_000001 0.134322212 0.0184322215 TG5_28:bin_000004 0.073959723 0.0140085108 D300514:bin_000001 0.066013869 0.0034101332 D300503:bin_000003 0.058390022 0.0073507361 D300499:bin_000015 0.047828161 0.0077144657 GPB:bin_000131 0.045153840 0.0078676163 GPB:bin_000128 0.038586933 0.0040052884 GPB:bin_000067 0.035675249 0.0065953450 D300464:bin_000017 0.034341911 0.0031772466 D300513:bin_000002 0.033892021 0.0030309458 GPB:bin_000035 0.025451423 0.0039111919 GPB:bin_000098 0.024901976 0.0036591647 GPB:bin_000150 0.022771123 0.0053096327 GPB:bin_000180 0.016388510 0.0009179975 GPB:bin_000100 0.015671471 0.0026522201 GPB:bin_000051 0.014464197 0.0022369472 GPB:bin_000071 0.013664129 0.0010044884 GPB:bin_000146 0.013104024 0.0032609807 GPB:bin_000177 0.012317879 0.0006833931 GPB:bin_000110 0.011947547 0.0023342738 GPB:bin_000096 0.010819631 0.0036674499 GPB:bin_000008 0.010799219 0.0019382795 D300479:bin_000012 0.010381828 0.0009176369 GPB:bin_000097 0.010345378 0.0010747212 GPB:bin_000121 0.009323384 0.0012855502 D300479:bin_000001 0.009284298 0.0030708565 TG5:bin_000047 0.009010480 0.0009725334 GPB:bin_000092 0.008360823 0.0008390804 GPB:bin_000161 0.008117754 0.0009590991 TG5_21:bin_000003 0.006980248 0.0072282716 genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(quality&gt;=4) %&gt;% mutate(genome=factor(genome,levels=rev(mag_summary %&gt;% pull(genome)))) %&gt;% filter(count &gt; 0) %&gt;% ggplot(aes(x=count, y=genome, group=genome, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.3) + facet_grid(.~cryosection)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.3 Genus overview genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(quality&gt;=4) %&gt;% group_by(microsample,cryosection,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_tufxruwvex6h822iocyb .table td.tinytable_css_sow5w7yf5x7gbxsao80z, .table th.tinytable_css_sow5w7yf5x7gbxsao80z { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Streptococcus 1.606213e-01 0.1212753087 Eisenbergiella 1.220605e-01 0.0238130945 Lactobacillus 9.747618e-02 0.0376004834 Mediterraneibacter 9.595320e-02 0.0224881290 Fimenecus 6.118323e-02 0.0213529576 Caccovicinus 6.033000e-02 0.0169008643 Blautia 5.026773e-02 0.0130645964 Gallimonas 4.465074e-02 0.0124703326 Pelethomonas 4.106568e-02 0.0118553205 Choladocola 3.986651e-02 0.0092494723 Agathobaculum 3.068570e-02 0.0124206142 Anaerobutyricum 2.211240e-02 0.0070097755 Acutalibacter 1.912411e-02 0.0073248590 UBA1417 1.296980e-02 0.0067630443 Faecousia 1.154478e-02 0.0045572982 Negativibacillus 1.140602e-02 0.0041768322 Lawsonibacter 1.016180e-02 0.0060676472 UMGS1370 8.845382e-03 0.0030934368 Lachnoclostridium_A 8.304476e-03 0.0055131868 Flavonifractor 7.623195e-03 0.0043770472 Thomasclavelia 6.024292e-03 0.0103158677 Rubneribacter 5.883512e-03 0.0041559833 Enterocloster 5.597011e-03 0.0033959785 HGM12545 5.533541e-03 0.0028478099 Sellimonas 5.243184e-03 0.0029443141 Merdisoma 4.846626e-03 0.0037545844 Scatosoma 4.652718e-03 0.0024925991 Copromonas 4.210315e-03 0.0024423900 Anaeromassilibacillus 4.000736e-03 0.0069808274 Merdivicinus 3.824202e-03 0.0026857651 Pullichristensenella 3.729579e-03 0.0024806005 Intestinimonas 3.454784e-03 0.0028426937 Enterenecus 3.433201e-03 0.0100625004 Scatomorpha 3.413170e-03 0.0024259276 Lachnoclostridium_B 3.203630e-03 0.0022888898 Anaerostipes 2.544495e-03 0.0024493868 Dysosmobacter 2.106625e-03 0.0019183135 Escherichia 1.893296e-03 0.0017959422 Massilimicrobiota 1.809809e-03 0.0020983661 Faecivivens 1.809083e-03 0.0018827249 Akkermansia 9.764831e-04 0.0012854307 Borkfalkia 7.893354e-04 0.0011905061 Roslinia 6.379381e-04 0.0010859594 Ruthenibacterium 5.165143e-04 0.0008778587 Romboutsia 4.974542e-04 0.0009965553 Anaerotignum 4.953307e-04 0.0009408635 Ornithomonoglobus 4.497739e-04 0.0008517372 Scatavimonas 3.891001e-04 0.0007677824 Evtepia 3.516998e-04 0.0008301186 Gallacutalibacter 3.228169e-04 0.0008048318 Merdimonas 2.761897e-04 0.0009029656 HGM12998 1.487547e-04 0.0004443756 UBA4716 1.425431e-04 0.0004271822 Clostridium_Q 6.620711e-05 0.0003523477 Clostridium_AQ 3.751594e-05 0.0001967550 Anaerotruncus 3.682229e-05 0.0001941056 Gordonibacter 1.624910e-05 0.0001215971 Acetatifactor 0.000000e+00 0.0000000000 Alangreenwoodia 0.000000e+00 0.0000000000 Alistipes 0.000000e+00 0.0000000000 An181 0.000000e+00 0.0000000000 Angelakisella 0.000000e+00 0.0000000000 Avimicrobium 0.000000e+00 0.0000000000 Avoscillospira 0.000000e+00 0.0000000000 Bifidobacterium 0.000000e+00 0.0000000000 Blautia_A 0.000000e+00 0.0000000000 Butyricicoccus 0.000000e+00 0.0000000000 CAG-245 0.000000e+00 0.0000000000 CAG-269 0.000000e+00 0.0000000000 CAG-273 0.000000e+00 0.0000000000 CAG-302 0.000000e+00 0.0000000000 CAG-313 0.000000e+00 0.0000000000 CAJFPI01 0.000000e+00 0.0000000000 CAJFUH01 0.000000e+00 0.0000000000 Caccenecus 0.000000e+00 0.0000000000 Caccomorpha 0.000000e+00 0.0000000000 Caccousia 0.000000e+00 0.0000000000 Catenibacillus 0.000000e+00 0.0000000000 Coprocola 0.000000e+00 0.0000000000 Coproplasma 0.000000e+00 0.0000000000 Egerieicola 0.000000e+00 0.0000000000 Enterococcus 0.000000e+00 0.0000000000 Enterococcus_B 0.000000e+00 0.0000000000 Enterococcus_D 0.000000e+00 0.0000000000 Eubacterium_R 0.000000e+00 0.0000000000 Faecalibacterium 0.000000e+00 0.0000000000 Faeciplasma 0.000000e+00 0.0000000000 Fimicola 0.000000e+00 0.0000000000 Fimimorpha 0.000000e+00 0.0000000000 Fimivicinus 0.000000e+00 0.0000000000 Fournierella 0.000000e+00 0.0000000000 Gallispira 0.000000e+00 0.0000000000 Galloscillospira_A 0.000000e+00 0.0000000000 Gemmiger 0.000000e+00 0.0000000000 Harrysmithimonas 0.000000e+00 0.0000000000 Heritagella 0.000000e+00 0.0000000000 Heteroclostridium 0.000000e+00 0.0000000000 Holdemania 0.000000e+00 0.0000000000 Hungatella_B 0.000000e+00 0.0000000000 JAETTH01 0.000000e+00 0.0000000000 Klebsiella 0.000000e+00 0.0000000000 Ligilactobacillus 0.000000e+00 0.0000000000 Limosilactobacillus 0.000000e+00 0.0000000000 Merdibacter 0.000000e+00 0.0000000000 Metalachnospira 0.000000e+00 0.0000000000 Neoanaerotignum_A 0.000000e+00 0.0000000000 Onthovicinus 0.000000e+00 0.0000000000 Ornithomonoglobus_A 0.000000e+00 0.0000000000 Paenibacillus_A 0.000000e+00 0.0000000000 Pararuminococcus 0.000000e+00 0.0000000000 Proteus 0.000000e+00 0.0000000000 Pseudobutyricicoccus 0.000000e+00 0.0000000000 Pullilachnospira 0.000000e+00 0.0000000000 RUG591 0.000000e+00 0.0000000000 RUG626 0.000000e+00 0.0000000000 Ruminococcus_G 0.000000e+00 0.0000000000 Salmonella 0.000000e+00 0.0000000000 Sarcina 0.000000e+00 0.0000000000 Scybalenecus 0.000000e+00 0.0000000000 Spyradocola 0.000000e+00 0.0000000000 Timburyella 0.000000e+00 0.0000000000 Tyzzerella 0.000000e+00 0.0000000000 UMGS775 0.000000e+00 0.0000000000 UMGS856 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% mutate(genus=factor(genus,levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.3) + facet_grid(.~cryosection)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) taxon_level=&quot;genus&quot; taxon_list =c(&quot;g__Lactobacillus&quot;,&quot;g__Escherichia&quot;,&quot;g__Streptococcus&quot;,&quot;g__Eisenbergiella&quot;,&quot;g__Mediterraneibacter&quot;,&quot;g__Caccovicinus&quot;) genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by=join_by(microsample==microsample)) %&gt;% filter(quality&gt;=5) %&gt;% left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(microsample,cryosection,!!sym(taxon_level)) %&gt;% summarise(relabun=sum(count)) genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Caccovicinus&quot;,&quot;g__Streptococcus&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Caccovicinus, y=g__Streptococcus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Lactobacillus&quot;,&quot;g__Streptococcus&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Lactobacillus, y=g__Streptococcus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Lactobacillus&quot;,&quot;g__Mediterraneibacter&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Mediterraneibacter, y=g__Lactobacillus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Streptococcus&quot;,&quot;g__Mediterraneibacter&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Streptococcus, y=g__Mediterraneibacter)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Lactobacillus&quot;,&quot;g__Caccovicinus&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Caccovicinus, y=g__Lactobacillus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Lactobacillus&quot;,&quot;g__Escherichia&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Escherichia, y=g__Lactobacillus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() genus_summary %&gt;% mutate(individual=substr(cryosection, 1, 4)) %&gt;% filter(genus %in% c(&quot;g__Streptococcus&quot;,&quot;g__Caccovicinus&quot;)) %&gt;% pivot_wider(names_from=genus,values_from=relabun) %&gt;% ggplot(aes(x=g__Streptococcus, y=g__Caccovicinus)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + facet_grid(~individual)+ theme_minimal() "],["alpha-diversity.html", "Chapter 5 Alpha diversity 5.1 Filtered", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 192 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 5.1 Filtered #Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=0) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(richness=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(neutral=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1,tree=genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(phylogenetic=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) # Merge alpha diversities alpha_diversity &lt;- richness %&gt;% full_join(neutral,by=join_by(microsample==microsample)) %&gt;% full_join(phylogenetic,by=join_by(microsample==microsample)) %&gt;% left_join(sample_metadata, by=join_by(microsample==microsample)) # Write alpha diversities alpha_diversity %&gt;% write_tsv(&quot;results/alpha_div_filtered.tsv&quot;) # Print alpha diversity alpha_diversity %&gt;% select(microsample,richness, neutral, phylogenetic, section, buffer, batch, Xcoord, Ycoord, size) %&gt;% tt() tinytable_ez6b7pbswpbq687lrrxe .table td.tinytable_css_u3h6t32twtvuem2s1q2q, .table th.tinytable_css_u3h6t32twtvuem2s1q2q { border-bottom: solid 0.1em #d3d8dc; } microsample richness neutral phylogenetic section buffer batch Xcoord Ycoord size M301187 31 21.174887 3.395836 Colon B11 MSEB0012 41588.97 14483.50 4976 M301188 57 32.813091 3.725331 Colon B11 MSEB0012 42210.95 14114.54 4976 M301189 10 8.923634 3.022453 Colon B11 MSEB0012 42366.29 14851.68 4976 M301191 48 28.423871 3.403210 Colon B11 MSEB0012 42936.94 16465.35 4976 M301192 75 35.207125 3.870364 Colon B11 MSEB0012 41942.00 16150.19 4976 M301193 89 41.439212 3.895322 Colon B11 MSEB0012 41959.48 16767.68 4976 M301194 43 24.463665 3.709234 Colon B11 MSEB0012 42470.54 20002.60 5140 M301195 67 35.053685 3.795386 Colon B11 MSEB0012 41919.91 20527.73 5140 M301198 67 34.558344 3.877942 Colon B11 MSEB0012 42513.92 20715.15 5140 M301199 67 34.419470 3.938528 Colon B11 MSEB0012 43081.68 19662.03 5140 M301200 62 32.586032 3.758453 Colon B11 MSEB0012 43612.05 19308.72 5140 M301201 51 30.519336 3.568299 Colon B11 MSEB0012 44226.06 19799.07 5140 M301202 64 34.107785 3.877176 Colon B11 MSEB0012 42132.93 18298.54 4976 M301203 72 36.680368 3.888952 Colon B11 MSEB0012 42237.62 19020.90 4976 M301204 19 13.821067 3.155496 Colon B11 MSEB0012 42818.54 19111.57 4976 M301205 1 1.000000 1.000000 Colon B11 MSEB0012 43990.81 18774.48 4976 M301206 20 15.196103 3.181433 Colon B11 MSEB0012 43954.10 20332.12 4976 M301208 29 20.710248 3.274489 Colon B11 MSEB0012 43012.94 17708.08 4976 M301210 75 38.816490 3.814202 Colon B11 MSEB0012 41104.78 14700.33 5140 M301211 77 35.769224 3.832465 Colon B11 MSEB0012 41488.66 14987.31 5140 M301212 87 41.001114 4.080353 Colon B11 MSEB0012 41539.84 15286.82 5140 M301214 43 25.976174 3.477160 Colon B11 MSEB0012 42027.74 15522.92 5140 M301215 5 4.690330 2.479403 Colon B11 MSEB0012 42176.40 14898.69 5140 M301216 85 42.711332 3.891128 Colon B11 MSEB0012 41037.61 15504.88 5140 M301219 69 40.063343 3.907525 Colon B11 MSEB0012 41631.10 19763.12 4815 M301222 31 20.606447 3.393566 Colon B11 MSEB0012 42382.15 19683.53 4815 M301223 65 35.816526 3.783127 Colon B11 MSEB0012 43057.73 19442.03 4815 M301224 47 29.247580 3.539238 Colon B11 MSEB0012 43016.47 20834.87 4815 M301225 27 14.239740 3.175677 Colon B11 MSEB0012 43704.73 20651.31 4815 M301226 8 7.600197 2.326459 Colon B11 MSEB0012 43160.89 20993.33 5306 M301227 1 1.000000 1.000000 Colon B11 MSEB0012 43696.69 20943.26 5306 M301229 51 27.281789 3.702726 Colon B11 MSEB0012 44259.10 18857.48 5306 M301233 77 42.910802 3.617582 Colon B11 MSEB0012 40950.94 17939.24 5306 M301282 46 27.687043 3.434225 Colon B11 MSEB0012 41453.47 17089.16 5140 M301283 38 25.030415 3.291787 Colon B11 MSEB0012 NA NA NA M301285 27 18.840871 3.252833 Colon B11 MSEB0012 40046.75 17578.35 5140 M301287 39 26.087849 3.476014 Colon B11 MSEB0012 41135.48 17654.27 5140 M301289 49 29.860186 3.579773 Colon B11 MSEB0012 41400.40 17608.99 5140 M301292 58 34.049074 3.740668 Colon B11 MSEB0012 42644.18 16003.35 4815 M301295 33 21.442575 3.438456 Colon B11 MSEB0012 NA NA NA M301296 80 39.386097 3.735271 Colon B11 MSEB0012 41799.07 17175.40 4815 M301297 36 24.073856 3.418058 Colon B11 MSEB0012 41736.45 17710.10 4815 M301298 33 23.777521 3.136635 Colon B11 MSEB0012 41347.28 31974.73 5306 M301301 20 16.668609 3.063817 Colon B11 MSEB0012 43703.01 31343.38 5306 M301302 60 32.701800 3.725839 Colon B11 MSEB0012 NA NA NA M301303 53 32.570766 3.541143 Colon B11 MSEB0012 40857.32 31477.10 5306 M301304 5 4.780727 2.625849 Colon B11 MSEB0012 41474.75 31562.72 5306 M301305 59 33.013624 3.585022 Colon B11 MSEB0012 41519.58 31125.50 5306 M301306 25 17.798074 3.288427 Colon B11 MSEB0012 41706.14 31251.87 4976 M301310 50 26.502522 3.598852 Colon B11 MSEB0012 41692.19 30653.78 4976 M301311 56 32.308424 3.624059 Colon B11 MSEB0012 41479.34 30448.76 4976 M301312 68 37.345828 3.714071 Colon B11 MSEB0012 41236.14 30480.26 4976 M301313 84 41.114991 4.150369 Colon B11 MSEB0012 41078.42 28639.54 4976 M301314 85 40.363382 3.740715 Colon B11 MSEB0012 44191.23 46773.50 5140 M301315 89 42.205982 3.897096 Colon B11 MSEB0012 42139.30 45801.06 5140 M301316 85 41.367979 3.860003 Colon B11 MSEB0012 42595.29 44136.58 5140 M301317 74 35.315246 3.816984 Colon B11 MSEB0012 41974.60 45566.24 5140 M301318 59 33.735973 3.572758 Colon B11 MSEB0012 42003.85 44910.96 5140 M301322 44 30.235234 3.363601 Colon B11 MSEB0012 42061.80 45023.36 4976 M301323 57 28.828339 3.564786 Colon B11 MSEB0012 42328.34 45345.91 4976 M301324 75 38.210501 3.756766 Colon B11 MSEB0012 42026.40 45425.59 4976 M301325 27 20.915934 3.157410 Colon B11 MSEB0012 42086.73 45884.32 4976 M301326 55 29.515772 3.607273 Colon B11 MSEB0012 43078.50 45522.39 4976 M301327 5 4.941882 2.665302 Colon B11 MSEB0012 NA NA NA M301329 71 33.364764 3.789696 Colon B11 MSEB0012 42995.46 44833.45 4976 # Print alpha diversity summary alpha_diversity %&gt;% select(richness, neutral, phylogenetic, cryosection, batch) %&gt;% group_by(cryosection) %&gt;% summarise(richness=mean(richness), neutral=mean(neutral), phylogenetic=mean(phylogenetic)) %&gt;% tt() tinytable_3i26laat0ss2tvdsuhri .table td.tinytable_css_ix7qxfyko1bc321xbchl, .table th.tinytable_css_ix7qxfyko1bc321xbchl { border-bottom: solid 0.1em #d3d8dc; } cryosection richness neutral phylogenetic G121eO302A 49.09091 26.934212 3.404803 G121eO302B 52.90323 29.648386 3.533815 G121eO302M 5.00000 4.941882 2.665302 alpha_diversity &lt;- read_tsv(&quot;results/alpha_div_filtered.tsv&quot;) alpha_diversity %&gt;% pivot_longer(!c(microsample,cryosection,section,batch,collection,type,buffer,Xcoord,Ycoord,size), names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(quality,by=join_by(microsample==microsample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% ggplot(aes(x=cryosection, y=value, color=quality, group=cryosection))+ scale_color_gradient(low = &quot;red&quot;, high = &quot;green&quot;, name = &quot;Quality&quot;) + geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.2) + facet_grid(metric ~ cryosection, scales = &quot;free&quot;) "],["beta-diversity.html", "Chapter 6 Beta diversity", " Chapter 6 Beta diversity load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 192 Columns: 2 ── Column specification ───────────────────────────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. selected_samples &lt;- sample_metadata %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(microsample %in% colnames(genome_counts_filt)) %&gt;% filter(!is.na(Xcoord)) %&gt;% select(microsample) %&gt;% pull() #Calculate Hill numbers richness_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=0, metric=&quot;C&quot;, out=&quot;pair&quot;) neutral_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, metric=&quot;C&quot;, out=&quot;pair&quot;) phylogenetic_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, tree=genome_tree, metric=&quot;C&quot;, out=&quot;pair&quot;) # Merge beta diversities beta_diversity &lt;- richness_caecum %&gt;% full_join(neutral_caecum,by=c(&quot;first&quot;, &quot;second&quot;)) %&gt;% full_join(phylogenetic_caecum,by=c(&quot;first&quot;, &quot;second&quot;)) %&gt;% rename(richness=C.x, neutral=C.y, phylogenetic=C) # Write alpha diversities beta_diversity %&gt;% write_tsv(&quot;results/beta_div.tsv&quot;) beta_diversity &lt;- read_tsv(&quot;results/beta_div.tsv&quot;) #Select high-quality samples caecum_samples_hq &lt;- sample_metadata %&gt;% left_join(quality,by=join_by(microsample==microsample)) %&gt;% filter(quality &gt;= 4) %&gt;% filter(!is.na(Xcoord)) %&gt;% select(microsample) %&gt;% pull() caecum_samples_nmds &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(caecum_samples_hq)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, metric=&quot;C&quot;, out=&quot;dist&quot;) %&gt;% metaMDS(.,trymax = 999, k=2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;microsample&quot;) %&gt;% left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% group_by(cryosection) %&gt;% mutate(microsample_x=mean(NMDS1), microsample_y=mean(NMDS2)) caecum_samples_nmds %&gt;% ggplot(aes(x=NMDS1,y=NMDS2, color=cryosection)) + geom_point(size=2) + geom_segment(aes(x=microsample_x, y=microsample_y, xend=NMDS1, yend=NMDS2), alpha=0.2) + scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#5bb5b1&quot;,&quot;#d1a3cf&quot;,&quot;#a364a0&quot;)) + theme_classic() + theme(legend.position=&quot;right&quot;, legend.box=&quot;vertical&quot;) + guides(color=guide_legend(title=&quot;Cryosection&quot;)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
